"""
给一个整数数组nums和一个整数k,返回nums中出现频率前k高的元素,任意顺序;
nums = [1,1,1,2,2,3], k = 2 --> [1, 2]

像这种求高频元素、低频元素、分位数等,可以使用堆这种结构(常被用来实现优先队列);
为什么以及如何实现?(由于是个完全二叉树,所以直接可以用数组来表示)
    x
/       \
y       z
大顶堆,x >= y ,x >= z,孩子之间的大小不确定
小顶堆,x <= y ,x <= z,孩子之间的大小不确定

建堆方法:
自上而下建堆法 --> 上滤:从底部进,与父节点比较,若大于则与父节点交换,一直往上判断
自下而上建堆法 --> 下滤:从倒数第二排的父节点开始,对每个父节点进行下滤操作,直到根节点(更快)

<<<<优先队列>>>>
两个操作:插入元素,弹出元素
插入:加在最后,然后进行上滤操作
弹出:将根节点删除(因为其肯定是最大或最小元素),填入新元素,然后进行下滤操作

******
高频k --> 使用小根堆,因为构建完k个元素的小根堆后,后面弹出元素时,总是弹出最小的,这样遍历一遍后,只剩最大的k个了
低频k --> 使用大根堆
******
"""
